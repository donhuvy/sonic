/*
 * Copyright 2022 ByteDance Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package utf8

import (
	"bytes"
	// "fmt"
	"math/rand"
	"os"
	"runtime"
	"runtime/debug"
	"strings"
	"testing"
	"time"
	"unicode/utf8"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var (
    debugSyncGC  = os.Getenv("SONIC_SYNC_GC") != ""
    debugAsyncGC = os.Getenv("SONIC_NO_ASYNC_GC") == ""
)

func TestMain(m *testing.M) {
    go func ()  {
        if !debugAsyncGC {
            return
        }
        println("Begin GC looping...")
        for {
           runtime.GC()
           debug.FreeOSMemory() 
        }
        println("stop GC looping!")
    }()
    time.Sleep(time.Millisecond*100)
    m.Run()
}

var (
    _Header_2Bytes  = string([]byte{0xC0})
    _Header_3Bytes  = string([]byte{0xE0})
    _Header_4Bytes  = string([]byte{0xF0})
    _Low_Surrogate  = string([]byte{0xED, 0xA0, 0x80}) // \ud800
    _High_Surrogate = string([]byte{0xED, 0xB0, 0x80}) // \udc00
    _Cont           = "\xb0"
)

func TestValidate_Random(t *testing.T) {
    println("TestValidate_Random")
    
    // compare with stdlib
    compare := func(t *testing.T, data []byte) {
        // fmt.Printf("%#v\n\n", (data))
        assert.Equal(t, utf8.Valid(data), Validate(data), string(data))
    }

    // random testing
    nums   := 1000
    maxLen := 1000
    for i := 0; i < nums; i++ {
        length := rand.Intn(maxLen)
        compare(t, genRandBytes(length))
        compare(t, genRandRune(length))
    }
}

func TestOne(t *testing.T) {
    println("TestValidate_Random")

    var xd = []byte{0x7c, 0x75, 0x5c, 0x2a, 0x7b, 0x4e, 0x18, 0x29, 0xae, 0xc7, 0xc5, 0x6, 0xc1, 0x64, 0x7, 0xcc, 0x17, 0xb0, 0x8f, 0xd5, 0xd2, 0xe3, 0x50, 0x6a, 0x9a, 0x48, 0x4, 0xa3, 0xba, 0x7b, 0x22, 0xd1, 0x15, 0x7d, 0x2a, 0x8f, 0x5e, 0x35, 0x8e, 0xfd, 0x26, 0x3d, 0x98, 0xf0, 0x10, 0x18, 0xd7, 0x1e, 0xdc, 0x1d, 0x54, 0x3a, 0x4d, 0xf3, 0xed, 0xdb, 0x19, 0x46, 0xf8, 0x5b, 0xf3, 0xe5, 0x2c, 0x4b, 0xb6, 0x80, 0x8, 0x4d, 0x27, 0x71, 0x58, 0xaa, 0x81, 0x28, 0x1c, 0x8a, 0xb5, 0x47, 0x6a, 0x84, 0x1b, 0xf2, 0x23, 0xc1, 0xc0, 0x6e, 0x51, 0xf9, 0xb5, 0x19, 0x80, 0xcd, 0xf8, 0x6, 0x6b, 0x31, 0xf6, 0x23, 0x84, 0x1c, 0xb6, 0xbf, 0xea, 0x59, 0x9b, 0xd8, 0x4f, 0x84, 0x4, 0xdb, 0x4b, 0x71, 0xe4, 0xae, 0xf2, 0xd6, 0xe9, 0x2a, 0x16, 0x42, 0x9e, 0xc, 0xfc, 0xa6, 0x84, 0x79, 0xc8, 0x2a, 0x23, 0xb3, 0x79, 0x29, 0xdd, 0xb5, 0x76, 0x19, 0x4e, 0xd1, 0x2a, 0xae, 0x21, 0x79, 0x2, 0x8e, 0x90, 0x6f, 0xc7, 0xf1, 0xf0, 0x64, 0xd1, 0x62, 0xb, 0xbd, 0x5b, 0x49, 0x1c, 0x14, 0x1c, 0xe6, 0x96, 0x97, 0x97, 0x3c, 0x76, 0x70, 0xf4, 0x3e, 0xba, 0x37, 0x88, 0xb2, 0x46, 0xbf, 0x22, 0xe9, 0xa2, 0x84, 0x7a, 0x3d, 0xf2, 0x12, 0xc9, 0xb5, 0x28, 0x15, 0xa, 0x31, 0x4e, 0xfc, 0x13, 0x9, 0x2, 0x41, 0x3f, 0xcc, 0x8e, 0xb, 0x6, 0xd1, 0xa3, 0x80, 0x6e, 0x48, 0x12, 0x0, 0xa7, 0xd2, 0x77, 0xcd, 0x9d, 0xb5, 0x91, 0x13, 0xa, 0x45, 0xbb, 0xe3, 0xfa, 0xf, 0xc7, 0x8f, 0x4f, 0x4c, 0x3c, 0xb3, 0xc1, 0xd7, 0xc8, 0x92, 0xb1, 0x32, 0xb, 0x7, 0x21, 0x27, 0x60, 0xa, 0xf5, 0x44, 0xdb, 0x90, 0x8c, 0x62, 0xbb, 0x20, 0xb1, 0x84, 0x3b, 0xdb, 0xaf, 0xdb, 0x44, 0x43, 0x2b, 0x89, 0x46, 0x75, 0x1, 0x55, 0xd7, 0x70, 0xdf, 0xf3, 0xfe, 0xf8, 0x18, 0xc4, 0x3c, 0xd5, 0xc8, 0xd8, 0x32, 0x4b, 0xcd, 0xc0, 0x96, 0x38, 0x8f, 0xe7, 0xd6, 0x48, 0xb3, 0x1, 0xce, 0x8, 0x20, 0xe4, 0xbd, 0x27, 0x21, 0xa, 0x77, 0x34, 0x5a, 0x50, 0x74, 0xd5, 0x56, 0xcb, 0xe2, 0xcb, 0x7a, 0x63, 0x5f, 0xe3, 0x4, 0x52, 0x87, 0xa8, 0x16, 0x3d, 0x78, 0xe5, 0xc3, 0x82, 0x84, 0x80, 0xc9, 0x67, 0xd4, 0x34, 0xb4, 0xaf, 0xef, 0x9f, 0x91, 0x5e, 0x1b, 0x8d, 0xf5, 0x43, 0x24, 0xb4, 0xda, 0xd0, 0xba, 0xc0, 0xee, 0xf1, 0x94, 0xa1, 0xe8, 0xac, 0xdb, 0x84, 0xb8, 0xdc, 0x99, 0x62, 0x4b, 0x19, 0xd1, 0xf8, 0xc5, 0x48, 0x7e, 0xeb, 0x9f, 0x82, 0xff, 0xe9, 0xa4, 0x88, 0x86, 0x5c, 0x28, 0x60, 0xf, 0xa3, 0xa7, 0xb, 0x97, 0xfe, 0x4c, 0x99, 0x17, 0x8, 0xb5, 0x58, 0x94, 0x21, 0xd8, 0x15, 0x36, 0x91, 0xd3, 0x62, 0x1d, 0x40, 0x4b, 0x5d, 0x3f, 0xdf, 0x60, 0xf2, 0x42, 0xdf, 0x5f, 0xe, 0x89}
    runtime.SetFinalizer(&xd[0], func(x *byte){
        println("x got GC: ", x)
    })
    runtime.GC()
    println("before")
    require.Equal(t, utf8.Valid(xd), Validate(xd))
    println("after")
    runtime.GC()
}

func TestCorrectWith_InvalidUtf8(t *testing.T) {
    var tests = []struct {
        name   string
        input  string
        expect string
        errpos int
    } {
        {"basic", `abc`, "abc", -1},
        {"long", strings.Repeat("helloÎ±ï¼Œæ™¯ðŸ˜Š", 1000), strings.Repeat("helloÎ±ï¼Œæ™¯ðŸ˜Š", 1000), -1},

        // invalid utf8 - single byte
        {"single_Cont", _Cont, "\ufffd", 0},
        {"single_Header_2Bytes", _Header_2Bytes, "\ufffd", 0},
        {"single_Header_3Bytes", _Header_3Bytes, "\ufffd", 0},
        {"single_Header_4Bytes", _Header_4Bytes, "\ufffd", 0},

        // invalid utf8 - two bytes
        {"two_Header_2Bytes + _Cont", _Header_2Bytes + _Cont, "\ufffd\ufffd", 0},
        {`two_Header_4Bytes + _Cont+ "xx"`, _Header_4Bytes + _Cont + "xx",  "\ufffd\ufffdxx", 0},
        { `"xx" + three_Header_4Bytes + _Cont + _Cont`, "xx" + _Header_4Bytes + _Cont + _Cont, "xx\ufffd\ufffd\ufffd", 2},

        // invalid utf8 - three bytes
        {`three_Low_Surrogate`, _Low_Surrogate, "\ufffd\ufffd\ufffd", 0},
        {`three__High_Surrogate`, _High_Surrogate, "\ufffd\ufffd\ufffd", 0},

        // invalid utf8 - multi bytes
        {`_High_Surrogate + _Low_Surrogate`, _High_Surrogate + _Low_Surrogate, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd", 0},
        {`"\x80\x80\x80\x80"`, "\x80\x80\x80\x80", "\ufffd\ufffd\ufffd\ufffd", 0},
    }
    for _, test := range tests {
        got := CorrectWith(nil, []byte(test.input), "\ufffd")
        assert.Equal(t, []byte(test.expect), got, test.name)
        assert.Equal(t,test.errpos == -1, utf8.ValidString(test.input), test.name)
    }
}

func genRandBytes(length int) []byte {
    var buf bytes.Buffer
    for j := 0; j < length; j++ {
        buf.WriteByte(byte(rand.Intn(0xFF + 1)))
    }
    return buf.Bytes()
}

func genRandAscii(length int) []byte {
    var buf bytes.Buffer
    for j := 0; j < length; j++ {
        buf.WriteByte(byte(rand.Intn(0x7F + 1)))
    }
    return buf.Bytes()
}

func genRandRune(length int) []byte {
    var buf bytes.Buffer
    for j := 0; j < length; j++ {
        buf.WriteRune(rune(rand.Intn(0x10FFFF + 1)))
    }
    return buf.Bytes()
}

func BenchmarkValidate(b *testing.B) {
    bench := []struct {
        name string
        data []byte
    } {
        {"ValidAscii", genRandAscii(1000)},
        {"ValidUTF8",  genRandRune(1000)},
        {"RandomBytes", genRandBytes(1000)},
    }

    for _, test := range bench {
        if utf8.Valid(test.data) != Validate(test.data) {
            b.Fatalf("sonic utf8 validate wrong for %s string: %v", test.name, test.data)
        }
        b.Run("Sonic_" + test.name, func(b *testing.B) {
            for i := 0; i < b.N; i++ {
                Validate(test.data)
            }
        })
        b.Run("StdLib_" + test.name, func(b *testing.B) {
            for i := 0; i < b.N; i++ {
                utf8.Valid(test.data)
            }
        })
    }
}
